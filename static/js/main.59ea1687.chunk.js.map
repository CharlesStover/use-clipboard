{"version":3,"sources":["components/code/code.tsx","components/prism/prism.tsx","components/prism/hooks/use-prism.ts","serviceWorker.ts","index.tsx","components/app/app.tsx","components/app/hooks/use-app.ts"],"names":["Code","children","className","Prism","lang","trim","dangerouslySetInnerHTML","React","useMemo","__html","highlight","languages","usePrism","Boolean","window","location","hostname","match","ReactDOM","render","useClippy","clipboard","setClipboard","useState","inputValue","setInputValue","handleInputChange","useCallback","e","newInputValue","currentTarget","value","handleInputCopyClick","useEffect","document","body","scrollIntoView","isInputCopyDisabled","useApp","href","rel","target","title","alt","height","src","aria-label","role","disabled","onChange","onClick","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0OAQe,SAASA,EAAT,GAAiD,IAAjCC,EAAgC,EAAhCA,SAC7B,OACE,6BAASC,UAAU,QACjB,oCACA,kBAACC,EAAD,CAAOC,KAAK,OAAOH,EAASI,S,gFCJnB,SAASF,EAAT,GAAwD,IAAvCF,EAAsC,EAAtCA,SAAUG,EAA4B,EAA5BA,KAChCE,ECOK,YAAqD,IAAjCL,EAAgC,EAAhCA,SAAUG,EAAsB,EAAtBA,KAQ3C,MAAO,CACLE,wBAR8BC,IAAMC,SACpC,iBAAgC,CAC9BC,OAAQN,IAAMO,UAAUT,EAAUE,IAAMQ,UAAUP,GAAOA,MAE3D,CAACH,EAAUG,KDZuBQ,CAAS,CAAEX,WAAUG,SAAjDE,wBAER,OACE,yBAAKJ,UAAS,mBAAcE,IAC1B,0BACEF,UAAS,mBAAcE,GACvBE,wBAAyBA,K,MEHbO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCDD,WAA6B,IAAD,ECM5B,WAA0B,IAAD,EACJC,MADI,mBAC/BC,EAD+B,KACpBC,EADoB,OAGFf,IAAMgB,SAAiB,cAHrB,mBAG/BC,EAH+B,KAGnBC,EAHmB,KAKhCC,EAAoBnB,IAAMoB,aAC9B,SAACC,GACC,IAAMC,EAAwBD,EAAEE,cAAcC,MAC9CN,EAAcI,KAEhB,CAACJ,IAGGO,EAAuBzB,IAAMoB,aAAY,WAC7CL,EAAaE,KACZ,CAACA,EAAYF,IAQhB,OAJAf,IAAM0B,WAAU,WACdnB,OAAOoB,SAASC,KAAKC,mBACpB,IAEI,CACLf,YACAK,oBACAM,uBACAR,aACAa,oBAAqBhB,IAAcG,GD3BjCc,GALFjB,EAFuC,EAEvCA,UACAK,EAHuC,EAGvCA,kBACAM,EAJuC,EAIvCA,qBACAR,EALuC,EAKvCA,WACAa,EANuC,EAMvCA,oBAGF,OACE,8BACE,4BACE,uBACEE,KAAK,2CACLC,IAAI,sBACJC,OAAO,SACPC,MAAM,oBAJR,cAOK,IARP,QAWA,6BACE,uBACEH,KAAK,kQACLC,IAAI,+BACJC,OAAO,SACPC,MAAM,+BAEN,yBACEC,IAAI,QACJC,OAAQ,GACRC,IAAI,yEAGR,yBACEF,IAAI,cACJC,OAAQ,GACRC,IAAI,gDAEN,yBACEF,IAAI,iBACJC,OAAQ,GACRC,IAAI,8DAEN,yBACEF,IAAI,gBACJC,OAAQ,GACRC,IAAI,kDAGR,iCACE,qDACyB,IACvB,0BAAMC,aAAW,GAAGC,KAAK,OAAzB,iBAIF,4EACA,8BAAUC,UAAQ,EAACjB,MAAOV,IAC1B,kBAACrB,EAAD,yGAMF,iCACE,qDACyB,IACvB,0BAAM8C,aAAW,GAAGC,KAAK,OAAzB,WAIF,2CACe,oCADf,+DAIA,kCACM,oCADN,0EAIA,gFACA,2BAAOE,SAAUvB,EAAmBK,MAAOP,IAC3C,4BAAQwB,SAAUX,EAAqBa,QAASlB,GAAhD,QAGA,kBAAChC,EAAD,oTAgBF,iCACE,sCACU,IACR,0BAAM8C,aAAW,GAAGC,KAAK,OAAzB,iBAIF,uEAC4C,IAC1C,uBACER,KAAK,4CACLC,IAAI,+BACJC,OAAO,SACPC,MAAM,6CAJR,oBAOK,IATP,kCAWK,QDvHG,MAASR,SAASiB,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.59ea1687.chunk.js","sourcesContent":["import React from 'react';\nimport { Prism } from '..';\nimport './code.scss';\n\ninterface Props {\n  children: string;\n}\n\nexport default function Code({ children }: Props): JSX.Element {\n  return (\n    <section className=\"code\">\n      <h3>Code</h3>\n      <Prism lang=\"jsx\">{children.trim()}</Prism>\n    </section>\n  );\n}\n","import React from 'react';\nimport { usePrism } from './hooks';\n\ninterface Props {\n  children: string;\n  lang: string;\n}\n\nexport default function Prism({ children, lang }: Props): JSX.Element {\n  const { dangerouslySetInnerHTML } = usePrism({ children, lang });\n\n  return (\n    <pre className={`language-${lang}`}>\n      <code\n        className={`language-${lang}`}\n        dangerouslySetInnerHTML={dangerouslySetInnerHTML}\n      />\n    </pre>\n  );\n}\n","import Prism from 'prismjs';\nimport React from 'react';\n\ninterface DangerouslySetInnerHTML {\n  __html: string;\n}\n\ninterface Props {\n  children: string;\n  lang: string;\n}\n\ninterface State {\n  dangerouslySetInnerHTML: DangerouslySetInnerHTML;\n}\n\nexport default function usePrism({ children, lang }: Props): State {\n  const dangerouslySetInnerHTML = React.useMemo(\n    (): DangerouslySetInnerHTML => ({\n      __html: Prism.highlight(children, Prism.languages[lang], lang),\n    }),\n    [children, lang],\n  );\n\n  return {\n    dangerouslySetInnerHTML,\n  };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './components';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { Code } from '..';\nimport { useApp } from './hooks';\nimport './app.scss';\n\nexport default function App(): JSX.Element {\n  const {\n    clipboard,\n    handleInputChange,\n    handleInputCopyClick,\n    inputValue,\n    isInputCopyDisabled,\n  } = useApp();\n\n  return (\n    <main>\n      <h1>\n        <a\n          href=\"https://www.npmjs.com/package/use-clippy\"\n          rel=\"noreferrer noopener\"\n          target=\"_blank\"\n          title=\"use-clippy - npm\"\n        >\n          use-clippy\n        </a>{' '}\n        demo\n      </h1>\n      <div>\n        <a\n          href=\"https://twitter.com/intent/tweet?text=useClippy%20lets%20you%20manage%20your%20users'%20clipboards%20with%20a%20React%20hook.&amp;url=https://www.npmjs.com/package/use-clippy&amp;via=CharlesStover&amp;hashtags=react,reactjs,javascript,typescript,webdev,webdevelopment\"\n          rel=\"nofollow noreferrer noopener\"\n          target=\"_blank\"\n          title=\"Share use-clippy on Twitter\"\n        >\n          <img\n            alt=\"Tweet\"\n            height={20}\n            src=\"https://img.shields.io/twitter/url/http/shields.io.svg?style=social\"\n          />\n        </a>\n        <img\n          alt=\"npm version\"\n          height={20}\n          src=\"https://img.shields.io/npm/v/use-clippy.svg\"\n        />\n        <img\n          alt=\"minzipped size\"\n          height={20}\n          src=\"https://img.shields.io/bundlephobia/minzip/use-clippy.svg\"\n        />\n        <img\n          alt=\"npm downloads\"\n          height={20}\n          src=\"https://img.shields.io/npm/dt/use-clippy.svg\"\n        />\n      </div>\n      <section>\n        <h2>\n          Reading your clipboard{' '}\n          <span aria-label=\"\" role=\"img\">\n            👓\n          </span>\n        </h2>\n        <p>Your clipboard's contents are displayed here.</p>\n        <textarea disabled value={clipboard} />\n        <Code>{`\nconst [clipboard] = useClippy();\n\nreturn <textarea disabled value={clipboard} />;\n        `}</Code>\n      </section>\n      <section>\n        <h2>\n          Setting your clipboard{' '}\n          <span aria-label=\"\" role=\"img\">\n            ✍\n          </span>\n        </h2>\n        <p>\n          Clicking the <em>Copy</em> button will set your clipboard's value to\n          the input value.\n        </p>\n        <p>\n          The <em>Copy</em> button is disabled if your clipboard already matches\n          the input value.\n        </p>\n        <p>The textarea in the previous section will update.</p>\n        <input onChange={handleInputChange} value={inputValue} />\n        <button disabled={isInputCopyDisabled} onClick={handleInputCopyClick}>\n          Copy\n        </button>\n        <Code>{`\nconst [clipboard, setClipboard] = useClippy();\n\nconst isDisabled = clipboard === inputValue;\n\nconst handleClick = React.useCallback(() => {\n  setClipboard(inputValue);\n}, [inputValue]);\n\nreturn (\n  <button disabled={isDisabled} onClick={handleClick}>\n    Copy\n  </button>\n);\n        `}</Code>\n      </section>\n      <section>\n        <h2>\n          Sponsor{' '}\n          <span aria-label=\"\" role=\"img\">\n            💗\n          </span>\n        </h2>\n        <p>\n          If you are a fan of this project, you may{' '}\n          <a\n            href=\"https://github.com/sponsors/CharlesStover\"\n            rel=\"nofollow noreferrer noopener\"\n            target=\"_blank\"\n            title=\"Sponsor @CharlesStover on GitHub Sponsors\"\n          >\n            become a sponsor\n          </a>{' '}\n          via GitHub's Sponsors Program.\n        </p>{' '}\n      </section>\n    </main>\n  );\n}\n","import React, { FormEvent } from 'react';\nimport useClippy from 'use-clippy';\n\ninterface State {\n  clipboard: string;\n  handleInputChange(event: FormEvent<HTMLInputElement>): void;\n  handleInputCopyClick(): void;\n  inputValue: string;\n  isInputCopyDisabled: boolean;\n}\n\nexport default function useApp(): State {\n  const [clipboard, setClipboard] = useClippy();\n\n  const [inputValue, setInputValue] = React.useState<string>('some value');\n\n  const handleInputChange = React.useCallback(\n    (e: FormEvent<HTMLInputElement>): void => {\n      const newInputValue: string = e.currentTarget.value;\n      setInputValue(newInputValue);\n    },\n    [setInputValue],\n  );\n\n  const handleInputCopyClick = React.useCallback((): void => {\n    setClipboard(inputValue);\n  }, [inputValue, setClipboard]);\n\n  // Page mysteriously loads in the middle. Probably due to Prism rendering\n  //   styles asynchronously. Scroll to the top of the body on load to fix this.\n  React.useEffect((): void => {\n    window.document.body.scrollIntoView();\n  }, []);\n\n  return {\n    clipboard,\n    handleInputChange,\n    handleInputCopyClick,\n    inputValue,\n    isInputCopyDisabled: clipboard === inputValue,\n  };\n}\n"],"sourceRoot":""}