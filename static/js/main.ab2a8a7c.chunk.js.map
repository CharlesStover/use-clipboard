{"version":3,"sources":["components/code/code.tsx","components/prism/prism.tsx","components/prism/hooks/use-prism.ts","serviceWorker.ts","index.tsx","components/app/app.tsx","components/app/hooks/use-app.ts"],"names":["Code","children","className","Prism","lang","trim","dangerouslySetInnerHTML","React","useMemo","__html","highlight","languages","usePrism","Boolean","window","location","hostname","match","ReactDOM","render","useClippy","clipboard","setClipboard","useState","textAreaValue","setTextAreaValue","handleTextAreaChange","useCallback","e","newValue","currentTarget","value","handleTextAreaCopyClick","useEffect","document","body","scrollIntoView","isInputCopyDisabled","useApp","href","rel","target","title","alt","height","src","aria-label","role","disabled","onChange","onClick","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0OAQe,SAASA,EAAT,GAAiD,IAAjCC,EAAgC,EAAhCA,SAC7B,OACE,6BAASC,UAAU,QACjB,oCACA,kBAACC,EAAD,CAAOC,KAAK,OAAOH,EAASI,S,gFCJnB,SAASF,EAAT,GAAwD,IAAvCF,EAAsC,EAAtCA,SAAUG,EAA4B,EAA5BA,KAChCE,ECOK,YAAqD,IAAjCL,EAAgC,EAAhCA,SAAUG,EAAsB,EAAtBA,KAQ3C,MAAO,CACLE,wBAR8BC,IAAMC,SACpC,iBAAgC,CAC9BC,OAAQN,IAAMO,UAAUT,EAAUE,IAAMQ,UAAUP,GAAOA,MAE3D,CAACH,EAAUG,KDZuBQ,CAAS,CAAEX,WAAUG,SAAjDE,wBAER,OACE,yBAAKJ,UAAS,mBAAcE,IAC1B,0BACEF,UAAS,mBAAcE,GACvBE,wBAAyBA,K,MEHbO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCDD,WAA8B,IAAD,ECM7B,WAA0B,IAAD,EACJC,MADI,mBAC/BC,EAD+B,KACpBC,EADoB,OAGIf,IAAMgB,SAAS,cAHnB,mBAG/BC,EAH+B,KAGhBC,EAHgB,KAKhCC,EAAuBnB,IAAMoB,aACjC,SAACC,GACC,IAAMC,EAAmBD,EAAEE,cAAcC,MACzCN,EAAiBI,KAEnB,IAGIG,EAA0BzB,IAAMoB,aAAY,WAChDL,EAAaE,KACZ,CAACF,EAAcE,IAQlB,OAJAjB,IAAM0B,WAAU,WACdnB,OAAOoB,SAASC,KAAKC,mBACpB,IAEI,CACLf,YACAK,uBACAM,0BACAK,oBAAqBhB,IAAcG,EACnCA,iBD3BEc,GALFjB,EAFwC,EAExCA,UACAK,EAHwC,EAGxCA,qBACAM,EAJwC,EAIxCA,wBACAK,EALwC,EAKxCA,oBACAb,EANwC,EAMxCA,cAGF,OACE,8BACE,4BACE,uBACEe,KAAK,2CACLC,IAAI,sBACJC,OAAO,SACPC,MAAM,oBAJR,cAOK,IARP,QAWA,6BACE,uBACEH,KAAK,kQACLC,IAAI,+BACJC,OAAO,SACPC,MAAM,+BAEN,yBACEC,IAAI,QACJC,OAAQ,GACRC,IAAI,yEAGR,yBACEF,IAAI,cACJC,OAAQ,GACRC,IAAI,gDAEN,yBACEF,IAAI,iBACJC,OAAQ,GACRC,IAAI,8DAEN,yBACEF,IAAI,gBACJC,OAAQ,GACRC,IAAI,kDAGR,iCACE,qDACyB,IACvB,0BAAMC,aAAW,GAAGC,KAAK,OAAzB,iBAIF,4EACA,8BAAUC,UAAQ,EAACjB,MAAOV,IAC1B,kBAACrB,EAAD,yGAMF,iCACE,qDACyB,IACvB,0BAAM8C,aAAW,GAAGC,KAAK,OAAzB,WAIF,2CACe,oCADf,+DAIA,kCACM,oCADN,0EAIA,gFACA,8BAAUE,SAAUvB,EAAsBK,MAAOP,IACjD,4BAAQwB,SAAUX,EAAqBa,QAASlB,GAAhD,QAGA,kBAAChC,EAAD,2UAgBF,iCACE,sCACU,IACR,0BAAM8C,aAAW,GAAGC,KAAK,OAAzB,iBAIF,uEAC4C,IAC1C,uBACER,KAAK,4CACLC,IAAI,+BACJC,OAAO,SACPC,MAAM,6CAJR,oBAOK,IATP,kCAWK,QDvHG,MAASR,SAASiB,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ab2a8a7c.chunk.js","sourcesContent":["import React from 'react';\nimport { Prism } from '..';\nimport './code.scss';\n\ninterface Props {\n  children: string;\n}\n\nexport default function Code({ children }: Props): JSX.Element {\n  return (\n    <section className=\"code\">\n      <h3>Code</h3>\n      <Prism lang=\"jsx\">{children.trim()}</Prism>\n    </section>\n  );\n}\n","import React from 'react';\nimport { usePrism } from './hooks';\n\ninterface Props {\n  children: string;\n  lang: string;\n}\n\nexport default function Prism({ children, lang }: Props): JSX.Element {\n  const { dangerouslySetInnerHTML } = usePrism({ children, lang });\n\n  return (\n    <pre className={`language-${lang}`}>\n      <code\n        className={`language-${lang}`}\n        dangerouslySetInnerHTML={dangerouslySetInnerHTML}\n      />\n    </pre>\n  );\n}\n","import Prism from 'prismjs';\nimport React from 'react';\n\ninterface DangerouslySetInnerHTML {\n  __html: string;\n}\n\ninterface Props {\n  children: string;\n  lang: string;\n}\n\ninterface State {\n  dangerouslySetInnerHTML: DangerouslySetInnerHTML;\n}\n\nexport default function usePrism({ children, lang }: Props): State {\n  const dangerouslySetInnerHTML = React.useMemo(\n    (): DangerouslySetInnerHTML => ({\n      __html: Prism.highlight(children, Prism.languages[lang], lang),\n    }),\n    [children, lang],\n  );\n\n  return {\n    dangerouslySetInnerHTML,\n  };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './components';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { ReactElement } from 'react';\r\nimport { Code } from '..';\r\nimport { useApp } from './hooks';\r\nimport './app.scss';\r\n\r\nexport default function App(): ReactElement {\r\n  const {\r\n    clipboard,\r\n    handleTextAreaChange,\r\n    handleTextAreaCopyClick,\r\n    isInputCopyDisabled,\r\n    textAreaValue,\r\n  } = useApp();\r\n\r\n  return (\r\n    <main>\r\n      <h1>\r\n        <a\r\n          href=\"https://www.npmjs.com/package/use-clippy\"\r\n          rel=\"noreferrer noopener\"\r\n          target=\"_blank\"\r\n          title=\"use-clippy - npm\"\r\n        >\r\n          use-clippy\r\n        </a>{' '}\r\n        demo\r\n      </h1>\r\n      <div>\r\n        <a\r\n          href=\"https://twitter.com/intent/tweet?text=useClippy%20lets%20you%20manage%20your%20users'%20clipboards%20with%20a%20React%20hook.&amp;url=https://www.npmjs.com/package/use-clippy&amp;via=CharlesStover&amp;hashtags=react,reactjs,javascript,typescript,webdev,webdevelopment\"\r\n          rel=\"nofollow noreferrer noopener\"\r\n          target=\"_blank\"\r\n          title=\"Share use-clippy on Twitter\"\r\n        >\r\n          <img\r\n            alt=\"Tweet\"\r\n            height={20}\r\n            src=\"https://img.shields.io/twitter/url/http/shields.io.svg?style=social\"\r\n          />\r\n        </a>\r\n        <img\r\n          alt=\"npm version\"\r\n          height={20}\r\n          src=\"https://img.shields.io/npm/v/use-clippy.svg\"\r\n        />\r\n        <img\r\n          alt=\"minzipped size\"\r\n          height={20}\r\n          src=\"https://img.shields.io/bundlephobia/minzip/use-clippy.svg\"\r\n        />\r\n        <img\r\n          alt=\"npm downloads\"\r\n          height={20}\r\n          src=\"https://img.shields.io/npm/dt/use-clippy.svg\"\r\n        />\r\n      </div>\r\n      <section>\r\n        <h2>\r\n          Reading your clipboard{' '}\r\n          <span aria-label=\"\" role=\"img\">\r\n            👓\r\n          </span>\r\n        </h2>\r\n        <p>Your clipboard's contents are displayed here.</p>\r\n        <textarea disabled value={clipboard} />\r\n        <Code>{`\r\nconst [clipboard] = useClippy();\r\n\r\nreturn <textarea disabled value={clipboard} />;\r\n        `}</Code>\r\n      </section>\r\n      <section>\r\n        <h2>\r\n          Setting your clipboard{' '}\r\n          <span aria-label=\"\" role=\"img\">\r\n            ✍\r\n          </span>\r\n        </h2>\r\n        <p>\r\n          Clicking the <em>Copy</em> button will set your clipboard's value to\r\n          the input value.\r\n        </p>\r\n        <p>\r\n          The <em>Copy</em> button is disabled if your clipboard already matches\r\n          the input value.\r\n        </p>\r\n        <p>The textarea in the previous section will update.</p>\r\n        <textarea onChange={handleTextAreaChange} value={textAreaValue} />\r\n        <button disabled={isInputCopyDisabled} onClick={handleTextAreaCopyClick}>\r\n          Copy\r\n        </button>\r\n        <Code>{`\r\nconst [clipboard, setClipboard] = useClippy();\r\n\r\nconst isDisabled = clipboard === textAreaValue;\r\n\r\nconst handleClick = React.useCallback(() => {\r\n  setClipboard(textAreaValue);\r\n}, [setClipboard, textAreaValue]);\r\n\r\nreturn (\r\n  <button disabled={isDisabled} onClick={handleClick}>\r\n    Copy\r\n  </button>\r\n);\r\n        `}</Code>\r\n      </section>\r\n      <section>\r\n        <h2>\r\n          Sponsor{' '}\r\n          <span aria-label=\"\" role=\"img\">\r\n            💗\r\n          </span>\r\n        </h2>\r\n        <p>\r\n          If you are a fan of this project, you may{' '}\r\n          <a\r\n            href=\"https://github.com/sponsors/CharlesStover\"\r\n            rel=\"nofollow noreferrer noopener\"\r\n            target=\"_blank\"\r\n            title=\"Sponsor @CharlesStover on GitHub Sponsors\"\r\n          >\r\n            become a sponsor\r\n          </a>{' '}\r\n          via GitHub's Sponsors Program.\r\n        </p>{' '}\r\n      </section>\r\n    </main>\r\n  );\r\n}\r\n","import React, { FormEvent } from 'react';\r\nimport useClippy from 'use-clippy';\r\n\r\ninterface State {\r\n  clipboard: string;\r\n  handleTextAreaCopyClick(): void;\r\n  handleTextAreaChange(event: FormEvent<HTMLTextAreaElement>): void;\r\n  isInputCopyDisabled: boolean;\r\n  textAreaValue: string;\r\n}\r\n\r\nexport default function useApp(): State {\r\n  const [clipboard, setClipboard] = useClippy();\r\n\r\n  const [textAreaValue, setTextAreaValue] = React.useState('some value');\r\n\r\n  const handleTextAreaChange = React.useCallback(\r\n    (e: FormEvent<HTMLTextAreaElement>): void => {\r\n      const newValue: string = e.currentTarget.value;\r\n      setTextAreaValue(newValue);\r\n    },\r\n    [],\r\n  );\r\n\r\n  const handleTextAreaCopyClick = React.useCallback((): void => {\r\n    setClipboard(textAreaValue);\r\n  }, [setClipboard, textAreaValue]);\r\n\r\n  // Page mysteriously loads in the middle. Probably due to Prism rendering\r\n  //   styles asynchronously. Scroll to the top of the body on load to fix this.\r\n  React.useEffect((): void => {\r\n    window.document.body.scrollIntoView();\r\n  }, []);\r\n\r\n  return {\r\n    clipboard,\r\n    handleTextAreaChange,\r\n    handleTextAreaCopyClick,\r\n    isInputCopyDisabled: clipboard === textAreaValue,\r\n    textAreaValue,\r\n  };\r\n}\r\n"],"sourceRoot":""}